# Read the file and count the number of lines
file_path = '/mnt/data/Enriching_MediaWiki_XML_with_NER_Ver.1.0_22052024.xml'

with open(file_path, 'r', encoding='utf-8') as file:
    lines = file.readlines()
    num_lines = len(lines)

num_lines

#The XML file "Enriching_MediaWiki_XML_with_NER_Ver.1.0_22052024.xml" contains 4310 lines.

#How many instances of the XML tage <weather> and </weather> can you find

# Read the file and count the number of <weather> and </weather> tags
weather_tag_count = 0

with open(file_path, 'r', encoding='utf-8') as file:
    for line in file:
        weather_tag_count += line.count('<weather>')
        weather_tag_count += line.count('</weather>')

weather_tag_count

#There are 56 instances of the <weather> and </weather> tags in the XML file "Enriching_MediaWiki_XML_with_NER_Ver.1.0_22052024.xml". ​

#How many instances of just <weather>

# Read the file and count the number of <weather> tags
weather_open_tag_count = 0

with open(file_path, 'r', encoding='utf-8') as file:
    for line in file:
        weather_open_tag_count += line.count('<weather>')

weather_open_tag_count

#There are 28 instances of the <weather> tag in the XML file "Enriching_MediaWiki_XML_with_NER_Ver.1.0_22052024.xml". ​

#Please list alphabetically all text within the tags <weather> and </weather>

# Extract and list alphabetically all text within the <weather> tags
import re

# Read the file content
with open(file_path, 'r', encoding='utf-8') as file:
    content = file.read()

# Find all text within <weather>...</weather> tags
weather_texts = re.findall(r'<weather>(.*?)</weather>', content, re.DOTALL)

# Sort the texts alphabetically
weather_texts_sorted = sorted(weather_texts)

weather_texts_sorted

#Result
['Crosse winds',
 'Crosse winds',
 'Crosse winds',
 'Northwest point',
 'Southwest point',
 'Storme',
 'Storme',
 'storm',
 'storm',
 'storme',
 'storme',
 'storme',
 'storme',
 'storme',
 'stormes and tempests',
 'stormy tempestuous weather',
 'tempest',
 'tempest',
 'tempest',
 'weather grew so darke',
 'wind',
 'wind',
 'wind then blowing',
 'winds',
 'winds',
 'winds',
 'winds',
 'winds']

#How many instances of the <place> tag are in this XML file?

# Read the file and count the number of <place> tags
place_tag_count = 0

with open(file_path, 'r', encoding='utf-8') as file:
    for line in file:
        place_tag_count += line.count('<place>')

place_tag_count

#Please list alphabetically all text within the tags <place> and </place> in the XML documeent

#There are 389 instances of the <place> tag in the XML file "Enriching_MediaWiki_XML_with_NER_Ver.1.0_22052024.xml". ​

## Extract and list alphabetically all text within the <place> tags
# This will read the content and find all <place>...</place> texts

# Find all text within <place>...</place> tags
place_texts = re.findall(r'<place>(.*?)</place>', content, re.DOTALL)

# Sort the texts alphabetically
place_texts_sorted = sorted(place_texts)

import ace_tools as tools; tools.display_dataframe_to_user(name="Place Texts Sorted", dataframe=pd.DataFrame(place_texts_sorted, columns=["Place Texts"]))

place_texts_sorted

['Antega',
 'Barbadas',
 'Barbadoes',
 'Barbadoes',
 'Barbadoes',
 'Barbadoes',
 'Barbadoes',
 'Barbadoes',
 'Barbadoes',
 'Barbados',
 'Barbados',
 'Barbados',
 'Barbados',
 'Barbados',
 'Barbary',
 'Bergen',
 'Bermondsey',
 'Bishopsgate streete',
 'Biskay',
 'Blackwall',
 'Brest',
 'Brest',
 'Bristol',
 'Bristoll',
 'Bristoll',
 'Bristow',
 'Burdeaux',
 'Burdeaux',
 'Cadiz',
 'Cadiz',
 'Cadiz',
 'Cadiz',
 'Cadiz',
 'Callice',
 'Callice',
 'Callice',
 'Callice',
 'Callice',
 'Callice',
 'Callice',
 'Callice',
 'Callice in ffrance',
 'Callice in france',
 'Canarie',
 'Cape of Grinay',
 'Charrott',
 'Christian\nSant',
 'Christian Sandt',
 'Christian sant',
 'Christian=Saint',
 'Christian=Sandt',
 'Christian=Sankt',
 'Cittizen and Scrivener',
 'City of London',
 'City of London',
 'City of Waterford',
 'City of Waterford',
 'Coast of Jutland',
 'Coast of Norway',
 'Colchester',
 'Commonwealth',
 'Comonwealth',
 'Copenhagen',
 'Copenhagen',
 'Cornwall',
 'County of\nSuffolk',
 'County of Middlesex',
 'Crutched ffriars London',
 'Dover',
 'Dover',
 'Dunquirke',
 'Dunquirke',
 'Dunquirke',
 'East sea',
 'England',
 'England',
 'England',
 'England',
 'England',
 'England',
 'England',
 'England',
 'England',
 'England',
 'England',
 'England',
 'English Coast',
 'English Coast',
 'English coast',
 'English shoare',
 'Englishman',
 'Flackery',
 'G&#91;?a&#93;sthaven',
 'Garachico',
 'Gastaven',
 'Gasthaven',
 'Gasthaven in\n<place>Norway',
 'Gilbraltar',
 'Ginney',
 'Gore',
 'Graveling',
 'Gravesend',
 'Gravesend',
 'Gusthaven',
 'Gusthaven',
 'Gusthaven',
 'Harwich',
 'Harwich',
 'Harwich',
 'Holmes',
 'Hope',
 'Hope',
 'Hope',
 'Inglonde',
 'Ipswich',
 'Ipswich',
 'Ipswich',
 'Ipswich',
 'Ipswich',
 'Ireland',
 'Ireland',
 'Island of Teneriff',
 'Jutland',
 'King of Spaines',
 'Kinge of Spaine',
 'Lombard Street',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'London',
 'Loratava',
 'Lubeck',
 'Mall&amp;#91;?e&amp;#93;ga',
 'Mall&amp;#91;?e&amp;#93;ga',
 'Mall&amp;#91;?e&amp;#93;ga',
 'Mall&amp;#91;?e&amp;#93;ga',
 'Mall&amp;#91;?e&amp;#93;ga',
 'Mall&amp;#91;?e&amp;#93;ga',
 'Mallaga',
 'Mallaga',
 'Mallaga',
 'Mallaga',
 'Mallaga',
 'Mallaga',
 'Mallaga',
 'Mallaga',
 'Mallaga',
 'Mallaga',
 'Mallaga',
 'Mallaga',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Mallega',
 'Middlesex',
 'Middlesex',
 'Middlesex',
 'Middlesex',
 'Morea',
 'Morea',
 'Morea',
 'Morea',
 'Morea',
 'Nantes',
 'Nantes',
 'Nathalagoe',
 'Nathalagoe Road',
 'Nathalagoe Road',
 'Nathalagoe Road',
 'Newcastle',
 'Newcastle',
 'Newcastle',
 'Newcastle',
 'Norfolk',
 'Norway',
 'Norway',
 'Norway',
 'Norway',
 'Norwich',
 'Oratava',
 'Oratava Roade',
 'Passage',
 'Petras',
 'Poplar in the County of Middlesex',
 'Port',
 'Port',
 'Port',
 'Port',
 'Port of London',
 'Port of London',
 'Portsmouth',
 'Portsmouth',
 'Portsmouth',
 'Quinsborough',
 'Quinsborough',
 'Quinsborough',
 'Quinsbourgh',
 'Quinsburg',
 'Quinsburgh',
 'Quinsburgh',
 'Quinsburgh',
 'Ratcliffe',
 'Reculvers',
 'Redriffe',
 'Redsand',
 'Redsand',
 'River Thames',
 'River of Waterford',
 'River of Waterford',
 'River of Waterford',
 'Road aforesayd',
 'Road of Nathalago',
 'Roade of Oratava',
 'Roade of Oratava',
 'Roade of Oratavo',
 'Saint Dunstan in the East',
 'Saint Katherine Coleman',
 'Saint Mary Magdalen',
 'Saint Maudlins Milkestreet London',
 'Saint Stephen Colemanstreete',
 'Santa Cruz',
 'Shadwell',
 'Sondt',
 'Sondt',
 'Southampton',
 'Southampton',
 'Southampton',
 'Southampton',
 'Southampton',
 'Southampton',
 'Southampton',
 'Southampton',
 'Spaine',
 'Spaine',
 'Spaine',
 'Spaine',
 'Spaine',
 'Spaine',
 'Spaine',
 'Spaine',
 'Spaine',
 'Spaine',
 'Spanish fflanders',
 'Stepney',
 'Stepney',
 'Strights',
 'Surrey',
 'Taverne',
 'Tenerifee',
 'Teneriff',
 'Teneriff',
 'Teneriff',
 'Teneriff',
 'Teneriff',
 'Teneriff',
 'Teneriff',
 'Teneriff',
 'Teneriff',
 'Thurstone',
 'Tunsborough',
 'Tunsborough',
 'Virginia',
 'Wapping Whitechapel',
 'Waterford',
 'Whitehall',
 'Woollpack',
 'Woollpacke',
 'Yarmouth',
 'Z\n\nant',
 'Zant',
 'bury',
 'bury',
 'bury',
 'bury Seint Edmund',
 'denmarke',
 'dover',
 'dutch merchants',
 'dutch merchants',
 'ffalmouth',
 'ffanchurch Streete London',
 'fflackery in Norway',
 'fflanders',
 'fflanders',
 'fflanders',
 'fflanders',
 'fflanders',
 'fflanders',
 'fflanders',
 'fflanders',
 'fflanders',
 'fflanders',
 'fflandrian',
 'fflandrians',
 'fflatts',
 'ffoy',
 'ffoy',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrance',
 'ffrederickstat',
 'france',
 'france',
 'france',
 'hampshire',
 'hampshire',
 'thames',
 'two leagues',
 'yarmouth',
 'yarmouth']

## Removing non-place entries from the XML content and saving the updated XML file

# List of non-place entries to remove
non_places = [
    'Cittizen and Scrivener',
    'King of Spaines',
    'Kinge of Spaine',
    'Mall&#91;?e&#93;ga',
    'Taverne',
    'G&#91;?a&#93;sthaven',
    'Z\n\nant',
    'Gasthaven in\n<place>Norway',
    'two leagues',
    'dutch merchants'
]

# Load the XML content
with open(file_path, 'r', encoding='utf-8') as file:
    content = file.read()

# Remove non-place entries
for non_place in non_places:
    content = re.sub(rf'<place>{re.escape(non_place)}</place>', '', content)

# Save the updated XML content to a new file
new_xml_path = '/mnt/data/Enriching_MediaWiki_XML_with_NER_Ver.1.1_20240522.xml'
with open(new_xml_path, 'w', encoding='utf-8') as file:
    file.write(content)

# Save the XML code in a .txt file
new_txt_path = '/mnt/data/Enriching_MediaWiki_XML_with_NER_Ver.1.1_20240522.txt'
with open(new_txt_path, 'w', encoding='utf-8') as file:
    file.write(content)

new_xml_path, new_txt_path

Result
('/mnt/data/Enriching_MediaWiki_XML_with_NER_Ver.1.1_20240522.xml',
 '/mnt/data/Enriching_MediaWiki_XML_with_NER_Ver.1.1_20240522.txt')

#Please check how many instances there now are of <place> in the revised XML file and produce and alphabetical list of all places in text between <place> and </place> tags

## Load the updated XML content
with open(new_xml_path, 'r', encoding='utf-8') as file:
    updated_content = file.read()

# Count the number of <place> tags
updated_place_tag_count = updated_content.count('<place>')

# Extract all text within <place>...</place> tags
updated_place_texts = re.findall(r'<place>(.*?)</place>', updated_content, re.DOTALL)

# Sort the texts alphabetically
updated_place_texts_sorted = sorted(updated_place_texts)

updated_place_tag_count, updated_place_texts_sorted

Result
(378,
 ['Antega',
  'Barbadas',
  'Barbadoes',
  'Barbadoes',
  'Barbadoes',
  'Barbadoes',
  'Barbadoes',
  'Barbadoes',
  'Barbadoes',
  'Barbados',
  'Barbados',
  'Barbados',
  'Barbados',
  'Barbados',
  'Barbary',
  'Bergen',
  'Bermondsey',
  'Bishopsgate streete',
  'Biskay',
  'Blackwall',
  'Brest',
  'Brest',
  'Bristol',
  'Bristoll',
  'Bristoll',
  'Bristow',
  'Burdeaux',
  'Burdeaux',
  'Cadiz',
  'Cadiz',
  'Cadiz',
  'Cadiz',
  'Cadiz',
  'Callice',
  'Callice',
  'Callice',
  'Callice',
  'Callice',
  'Callice',
  'Callice',
  'Callice',
  'Callice in ffrance',
  'Callice in france',
  'Canarie',
  'Cape of Grinay',
  'Charrott',
  'Christian\nSant',
  'Christian Sandt',
  'Christian sant',
  'Christian=Saint',
  'Christian=Sandt',
  'Christian=Sankt',
  'City of London',
  'City of London',
  'City of Waterford',
  'City of Waterford',
  'Coast of Jutland',
  'Coast of Norway',
  'Colchester',
  'Commonwealth',
  'Comonwealth',
  'Copenhagen',
  'Copenhagen',
  'Cornwall',
  'County of\nSuffolk',
  'County of Middlesex',
  'Crutched ffriars London',
  'Dover',
  'Dover',
  'Dunquirke',
  'Dunquirke',
  'Dunquirke',
  'East sea',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'English Coast',
  'English Coast',
  'English coast',
  'English shoare',
  'Englishman',
  'Flackery',
  'Garachico',
  'Gastaven',
  'Gasthaven',
  'Gilbraltar',
  'Ginney',
  'Gore',
  'Graveling',
  'Gravesend',
  'Gravesend',
  'Gusthaven',
  'Gusthaven',
  'Gusthaven',
  'Harwich',
  'Harwich',
  'Harwich',
  'Holmes',
  'Hope',
  'Hope',
  'Hope',
  'Inglonde',
  'Ipswich',
  'Ipswich',
  'Ipswich',
  'Ipswich',
  'Ipswich',
  'Ireland',
  'Ireland',
  'Island of Teneriff',
  'Jutland',
  'Lombard Street',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'Loratava',
  'Lubeck',
  'Mall&amp;#91;?e&amp;#93;ga',
  'Mall&amp;#91;?e&amp;#93;ga',
  'Mall&amp;#91;?e&amp;#93;ga',
  'Mall&amp;#91;?e&amp;#93;ga',
  'Mall&amp;#91;?e&amp;#93;ga',
  'Mall&amp;#91;?e&amp;#93;ga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Middlesex',
  'Middlesex',
  'Middlesex',
  'Middlesex',
  'Morea',
  'Morea',
  'Morea',
  'Morea',
  'Morea',
  'Nantes',
  'Nantes',
  'Nathalagoe',
  'Nathalagoe Road',
  'Nathalagoe Road',
  'Nathalagoe Road',
  'Newcastle',
  'Newcastle',
  'Newcastle',
  'Newcastle',
  'Norfolk',
  'Norway',
  'Norway',
  'Norway',
  'Norway',
  'Norwich',
  'Oratava',
  'Oratava Roade',
  'Passage',
  'Petras',
  'Poplar in the County of Middlesex',
  'Port',
  'Port',
  'Port',
  'Port',
  'Port of London',
  'Port of London',
  'Portsmouth',
  'Portsmouth',
  'Portsmouth',
  'Quinsborough',
  'Quinsborough',
  'Quinsborough',
  'Quinsbourgh',
  'Quinsburg',
  'Quinsburgh',
  'Quinsburgh',
  'Quinsburgh',
  'Ratcliffe',
  'Reculvers',
  'Redriffe',
  'Redsand',
  'Redsand',
  'River Thames',
  'River of Waterford',
  'River of Waterford',
  'River of Waterford',
  'Road aforesayd',
  'Road of Nathalago',
  'Roade of Oratava',
  'Roade of Oratava',
  'Roade of Oratavo',
  'Saint Dunstan in the East',
  'Saint Katherine Coleman',
  'Saint Mary Magdalen',
  'Saint Maudlins Milkestreet London',
  'Saint Stephen Colemanstreete',
  'Santa Cruz',
  'Shadwell',
  'Sondt',
  'Sondt',
  'Southampton',
  'Southampton',
  'Southampton',
  'Southampton',
  'Southampton',
  'Southampton',
  'Southampton',
  'Southampton',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spanish fflanders',
  'Stepney',
  'Stepney',
  'Strights',
  'Surrey',
  'Tenerifee',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Thurstone',
  'Tunsborough',
  'Tunsborough',
  'Virginia',
  'Wapping Whitechapel',
  'Waterford',
  'Whitehall',
  'Woollpack',
  'Woollpacke',
  'Yarmouth',
  'Zant',
  'bury',
  'bury',
  'bury',
  'bury Seint Edmund',
  'denmarke',
  'dover',
  'ffalmouth',
  'ffanchurch Streete London',
  'fflackery in Norway',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflandrian',
  'fflandrians',
  'fflatts',
  'ffoy',
  'ffoy',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrederickstat',
  'france',
  'france',
  'france',
  'hampshire',
  'hampshire',
  'thames',
  'yarmouth',
  'yarmouth'])

#There is still and error. These are not places, please exclude and create new downloadable XML and txt files with the data further cleaned
#Please then list alphabetically all instances of data between <place> and </place> and confirm the number of instances of <place> you see

 'Mall&amp;#91;?e&amp;#93;ga',
  'Mall&amp;#91;?e&amp;#93;ga',
  'Mall&amp;#91;?e&amp;#93;ga',
  'Mall&amp;#91;?e&amp;#93;ga',
  'Mall&amp;#91;?e&amp;#93;ga',
  'Mall&amp;#91;?e&amp;#93;ga',

## Further cleaning to remove additional non-place entries
additional_non_places = [
    'Mall&amp;#91;?e&amp;#93;ga'
]

# Remove additional non-place entries
for non_place in additional_non_places:
    content = re.sub(rf'<place>{re.escape(non_place)}</place>', '', content)

# Save the updated XML content to a new file
new_cleaned_xml_path = '/mnt/data/Enriching_MediaWiki_XML_with_NER_Ver.1.2_20240522.xml'
with open(new_cleaned_xml_path, 'w', encoding='utf-8') as file:
    file.write(content)

# Save the cleaned XML code in a .txt file
new_cleaned_txt_path = '/mnt/data/Enriching_MediaWiki_XML_with_NER_Ver.1.2_20240522.txt'
with open(new_cleaned_txt_path, 'w', encoding='utf-8') as file:
    file.write(content)

# Load the cleaned XML content
with open(new_cleaned_xml_path, 'r', encoding='utf-8') as file:
    cleaned_content = file.read()

# Count the number of <place> tags
cleaned_place_tag_count = cleaned_content.count('<place>')

# Extract all text within <place>...</place> tags
cleaned_place_texts = re.findall(r'<place>(.*?)</place>', cleaned_content, re.DOTALL)

# Sort the texts alphabetically
cleaned_place_texts_sorted = sorted(cleaned_place_texts)

cleaned_place_tag_count, cleaned_place_texts_sorted, new_cleaned_xml_path, new_cleaned_txt_path

Result
(372,
 ['Antega',
  'Barbadas',
  'Barbadoes',
  'Barbadoes',
  'Barbadoes',
  'Barbadoes',
  'Barbadoes',
  'Barbadoes',
  'Barbadoes',
  'Barbados',
  'Barbados',
  'Barbados',
  'Barbados',
  'Barbados',
  'Barbary',
  'Bergen',
  'Bermondsey',
  'Bishopsgate streete',
  'Biskay',
  'Blackwall',
  'Brest',
  'Brest',
  'Bristol',
  'Bristoll',
  'Bristoll',
  'Bristow',
  'Burdeaux',
  'Burdeaux',
  'Cadiz',
  'Cadiz',
  'Cadiz',
  'Cadiz',
  'Cadiz',
  'Callice',
  'Callice',
  'Callice',
  'Callice',
  'Callice',
  'Callice',
  'Callice',
  'Callice',
  'Callice in ffrance',
  'Callice in france',
  'Canarie',
  'Cape of Grinay',
  'Charrott',
  'Christian\nSant',
  'Christian Sandt',
  'Christian sant',
  'Christian=Saint',
  'Christian=Sandt',
  'Christian=Sankt',
  'City of London',
  'City of London',
  'City of Waterford',
  'City of Waterford',
  'Coast of Jutland',
  'Coast of Norway',
  'Colchester',
  'Commonwealth',
  'Comonwealth',
  'Copenhagen',
  'Copenhagen',
  'Cornwall',
  'County of\nSuffolk',
  'County of Middlesex',
  'Crutched ffriars London',
  'Dover',
  'Dover',
  'Dunquirke',
  'Dunquirke',
  'Dunquirke',
  'East sea',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'England',
  'English Coast',
  'English Coast',
  'English coast',
  'English shoare',
  'Englishman',
  'Flackery',
  'Garachico',
  'Gastaven',
  'Gasthaven',
  'Gilbraltar',
  'Ginney',
  'Gore',
  'Graveling',
  'Gravesend',
  'Gravesend',
  'Gusthaven',
  'Gusthaven',
  'Gusthaven',
  'Harwich',
  'Harwich',
  'Harwich',
  'Holmes',
  'Hope',
  'Hope',
  'Hope',
  'Inglonde',
  'Ipswich',
  'Ipswich',
  'Ipswich',
  'Ipswich',
  'Ipswich',
  'Ireland',
  'Ireland',
  'Island of Teneriff',
  'Jutland',
  'Lombard Street',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'London',
  'Loratava',
  'Lubeck',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallaga',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Mallega',
  'Middlesex',
  'Middlesex',
  'Middlesex',
  'Middlesex',
  'Morea',
  'Morea',
  'Morea',
  'Morea',
  'Morea',
  'Nantes',
  'Nantes',
  'Nathalagoe',
  'Nathalagoe Road',
  'Nathalagoe Road',
  'Nathalagoe Road',
  'Newcastle',
  'Newcastle',
  'Newcastle',
  'Newcastle',
  'Norfolk',
  'Norway',
  'Norway',
  'Norway',
  'Norway',
  'Norwich',
  'Oratava',
  'Oratava Roade',
  'Passage',
  'Petras',
  'Poplar in the County of Middlesex',
  'Port',
  'Port',
  'Port',
  'Port',
  'Port of London',
  'Port of London',
  'Portsmouth',
  'Portsmouth',
  'Portsmouth',
  'Quinsborough',
  'Quinsborough',
  'Quinsborough',
  'Quinsbourgh',
  'Quinsburg',
  'Quinsburgh',
  'Quinsburgh',
  'Quinsburgh',
  'Ratcliffe',
  'Reculvers',
  'Redriffe',
  'Redsand',
  'Redsand',
  'River Thames',
  'River of Waterford',
  'River of Waterford',
  'River of Waterford',
  'Road aforesayd',
  'Road of Nathalago',
  'Roade of Oratava',
  'Roade of Oratava',
  'Roade of Oratavo',
  'Saint Dunstan in the East',
  'Saint Katherine Coleman',
  'Saint Mary Magdalen',
  'Saint Maudlins Milkestreet London',
  'Saint Stephen Colemanstreete',
  'Santa Cruz',
  'Shadwell',
  'Sondt',
  'Sondt',
  'Southampton',
  'Southampton',
  'Southampton',
  'Southampton',
  'Southampton',
  'Southampton',
  'Southampton',
  'Southampton',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spaine',
  'Spanish fflanders',
  'Stepney',
  'Stepney',
  'Strights',
  'Surrey',
  'Tenerifee',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Teneriff',
  'Thurstone',
  'Tunsborough',
  'Tunsborough',
  'Virginia',
  'Wapping Whitechapel',
  'Waterford',
  'Whitehall',
  'Woollpack',
  'Woollpacke',
  'Yarmouth',
  'Zant',
  'bury',
  'bury',
  'bury',
  'bury Seint Edmund',
  'denmarke',
  'dover',
  'ffalmouth',
  'ffanchurch Streete London',
  'fflackery in Norway',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflanders',
  'fflandrian',
  'fflandrians',
  'fflatts',
  'ffoy',
  'ffoy',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrance',
  'ffrederickstat',
  'france',
  'france',
  'france',
  'hampshire',
  'hampshire',
  'thames',
  'yarmouth',
  'yarmouth'],
 '/mnt/data/Enriching_MediaWiki_XML_with_NER_Ver.1.2_20240522.xml',
 '/mnt/data/Enriching_MediaWiki_XML_with_NER_Ver.1.2_20240522.txt')

#Please now list these place names alphabetically, removing duplicates from the list, but do not alter teh structure of the revised XML file (which is now ver 1.2)

# List of unique place names alphabetically
unique_cleaned_place_texts_sorted = sorted(set(cleaned_place_texts_sorted))

import ace_tools as tools; tools.display_dataframe_to_user(name="Unique Place Names Sorted", dataframe=pd.DataFrame(unique_cleaned_place_texts_sorted, columns=["Place Names"]))

unique_cleaned_place_texts_sorted

['Antega',
 'Barbadas',
 'Barbadoes',
 'Barbados',
 'Barbary',
 'Bergen',
 'Bermondsey',
 'Bishopsgate streete',
 'Biskay',
 'Blackwall',
 'Brest',
 'Bristol',
 'Bristoll',
 'Bristow',
 'Burdeaux',
 'Cadiz',
 'Callice',
 'Callice in ffrance',
 'Callice in france',
 'Canarie',
 'Cape of Grinay',
 'Charrott',
 'Christian\nSant',
 'Christian Sandt',
 'Christian sant',
 'Christian=Saint',
 'Christian=Sandt',
 'Christian=Sankt',
 'City of London',
 'City of Waterford',
 'Coast of Jutland',
 'Coast of Norway',
 'Colchester',
 'Commonwealth',
 'Comonwealth',
 'Copenhagen',
 'Cornwall',
 'County of\nSuffolk',
 'County of Middlesex',
 'Crutched ffriars London',
 'Dover',
 'Dunquirke',
 'East sea',
 'England',
 'English Coast',
 'English coast',
 'English shoare',
 'Englishman',
 'Flackery',
 'Garachico',
 'Gastaven',
 'Gasthaven',
 'Gilbraltar',
 'Ginney',
 'Gore',
 'Graveling',
 'Gravesend',
 'Gusthaven',
 'Harwich',
 'Holmes',
 'Hope',
 'Inglonde',
 'Ipswich',
 'Ireland',
 'Island of Teneriff',
 'Jutland',
 'Lombard Street',
 'London',
 'Loratava',
 'Lubeck',
 'Mallaga',
 'Mallega',
 'Middlesex',
 'Morea',
 'Nantes',
 'Nathalagoe',
 'Nathalagoe Road',
 'Newcastle',
 'Norfolk',
 'Norway',
 'Norwich',
 'Oratava',
 'Oratava Roade',
 'Passage',
 'Petras',
 'Poplar in the County of Middlesex',
 'Port',
 'Port of London',
 'Portsmouth',
 'Quinsborough',
 'Quinsbourgh',
 'Quinsburg',
 'Quinsburgh',
 'Ratcliffe',
 'Reculvers',
 'Redriffe',
 'Redsand',
 'River Thames',
 'River of Waterford',
 'Road aforesayd',
 'Road of Nathalago',
 'Roade of Oratava',
 'Roade of Oratavo',
 'Saint Dunstan in the East',
 'Saint Katherine Coleman',
 'Saint Mary Magdalen',
 'Saint Maudlins Milkestreet London',
 'Saint Stephen Colemanstreete',
 'Santa Cruz',
 'Shadwell',
 'Sondt',
 'Southampton',
 'Spaine',
 'Spanish fflanders',
 'Stepney',
 'Strights',
 'Surrey',
 'Tenerifee',
 'Teneriff',
 'Thurstone',
 'Tunsborough',
 'Virginia',
 'Wapping Whitechapel',
 'Waterford',
 'Whitehall',
 'Woollpack',
 'Woollpacke',
 'Yarmouth',
 'Zant',
 'bury',
 'bury Seint Edmund',
 'denmarke',
 'dover',
 'ffalmouth',
 'ffanchurch Streete London',
 'fflackery in Norway',
 'fflanders',
 'fflandrian',
 'fflandrians',
 'fflatts',
 'ffoy',
 'ffrance',
 'ffrederickstat',
 'france',
 'hampshire',
 'thames',
 'yarmouth']

#That is good. Please relist treating  Capital letters and lower case the same

# List of unique place names alphabetically treating capital and lower case the same
unique_cleaned_place_texts_sorted_ignore_case = sorted(set(cleaned_place_texts_sorted), key=lambda s: s.lower())

unique_cleaned_place_texts_sorted_ignore_case

Result
['Antega',
 'Barbadas',
 'Barbadoes',
 'Barbados',
 'Barbary',
 'Bergen',
 'Bermondsey',
 'Bishopsgate streete',
 'Biskay',
 'Blackwall',
 'Brest',
 'Bristol',
 'Bristoll',
 'Bristow',
 'Burdeaux',
 'bury',
 'bury Seint Edmund',
 'Cadiz',
 'Callice',
 'Callice in ffrance',
 'Callice in france',
 'Canarie',
 'Cape of Grinay',
 'Charrott',
 'Christian\nSant',
 'Christian Sandt',
 'Christian sant',
 'Christian=Saint',
 'Christian=Sandt',
 'Christian=Sankt',
 'City of London',
 'City of Waterford',
 'Coast of Jutland',
 'Coast of Norway',
 'Colchester',
 'Commonwealth',
 'Comonwealth',
 'Copenhagen',
 'Cornwall',
 'County of\nSuffolk',
 'County of Middlesex',
 'Crutched ffriars London',
 'denmarke',
 'dover',
 'Dover',
 'Dunquirke',
 'East sea',
 'England',
 'English Coast',
 'English coast',
 'English shoare',
 'Englishman',
 'ffalmouth',
 'ffanchurch Streete London',
 'fflackery in Norway',
 'fflanders',
 'fflandrian',
 'fflandrians',
 'fflatts',
 'ffoy',
 'ffrance',
 'ffrederickstat',
 'Flackery',
 'france',
 'Garachico',
 'Gastaven',
 'Gasthaven',
 'Gilbraltar',
 'Ginney',
 'Gore',
 'Graveling',
 'Gravesend',
 'Gusthaven',
 'hampshire',
 'Harwich',
 'Holmes',
 'Hope',
 'Inglonde',
 'Ipswich',
 'Ireland',
 'Island of Teneriff',
 'Jutland',
 'Lombard Street',
 'London',
 'Loratava',
 'Lubeck',
 'Mallaga',
 'Mallega',
 'Middlesex',
 'Morea',
 'Nantes',
 'Nathalagoe',
 'Nathalagoe Road',
 'Newcastle',
 'Norfolk',
 'Norway',
 'Norwich',
 'Oratava',
 'Oratava Roade',
 'Passage',
 'Petras',
 'Poplar in the County of Middlesex',
 'Port',
 'Port of London',
 'Portsmouth',
 'Quinsborough',
 'Quinsbourgh',
 'Quinsburg',
 'Quinsburgh',
 'Ratcliffe',
 'Reculvers',
 'Redriffe',
 'Redsand',
 'River of Waterford',
 'River Thames',
 'Road aforesayd',
 'Road of Nathalago',
 'Roade of Oratava',
 'Roade of Oratavo',
 'Saint Dunstan in the East',
 'Saint Katherine Coleman',
 'Saint Mary Magdalen',
 'Saint Maudlins Milkestreet London',
 'Saint Stephen Colemanstreete',
 'Santa Cruz',
 'Shadwell',
 'Sondt',
 'Southampton',
 'Spaine',
 'Spanish fflanders',
 'Stepney',
 'Strights',
 'Surrey',
 'Tenerifee',
 'Teneriff',
 'thames',
 'Thurstone',
 'Tunsborough',
 'Virginia',
 'Wapping Whitechapel',
 'Waterford',
 'Whitehall',
 'Woollpack',
 'Woollpacke',
 'yarmouth',
 'Yarmouth',
 'Zant']

#Now please create a two column table

#Column 1: Place
#Column 2: Gellocation (analogue format)
#Column 3: colocation (decimal format}

#What method or methods do you propose to do the geolocation? Remember this is historic data from the 1650s. Place names are mainly European (including England, Wales, Scotland and Ireland) buut also include Caribbean and North American place names

To create a table with place names and their geolocation in both analogue and decimal formats, we will need to follow these steps:

Methods for Geolocation:
Historical Maps and Atlases:

Use historical maps from the 1650s to find the geographic coordinates of places.
Reference works such as "The Historical Atlas of the British Isles" and other period-specific atlases.
Online Databases and Resources:

Use online databases like Geonames, Historical Gazetteers, or other historical geographic information systems (GIS) to find historical place names and their coordinates.
Resources like the Getty Thesaurus of Geographic Names (TGN) or the PastPlace historical gazetteer.
Modern Geolocation Services:

Utilize modern geolocation services like Google Maps, but with caution to cross-reference with historical context to ensure accuracy.
Convert coordinates into both decimal and analogue formats.
Academic Resources and Publications:

Consult academic publications and historical documents that list geographic coordinates of historical places.
Utilize libraries or digital archives for access to historical geographic records.
Steps to Create the Table:
Compile Place Names: Start with the list of unique place names.
Research Geolocation: For each place name, use the methods mentioned above to find its historical geolocation.
Format Coordinates: Convert the geolocation data into both analogue (degrees, minutes, seconds) and decimal formats.
Create the Table: Compile the information into a table with three columns: Place, Geolocation (Analogue Format), and Geolocation (Decimal Format).
Sample Table Structure:
Place	Geolocation (Analogue Format)	Geolocation (Decimal Format)
London	51°30'26.6"N 0°07'39.2"W	51.507389, -0.127567
Bristol	51°27'15.0"N 2°35'29.0"W	51.454167, -2.591389
Barbadoes	13°11'55.0"N 59°33'33.0"W	13.198611, -59.559167
Yarmouth	52°36'00.0"N 1°43'00.0"E	52.600000, 1.716667
Implementation:
To start, I will create a basic table for a few example places and then expand it based on more comprehensive research.

Example Implementation:
Here are a few example places with their geolocations. I will use a combination of historical resources and modern geolocation tools.

London:

Analogue: 51°30'26.6"N 0°07'39.2"W
Decimal: 51.507389, -0.127567
Bristol:

Analogue: 51°27'15.0"N 2°35'29.0"W
Decimal: 51.454167, -2.591389
Barbadoes (Historical reference to Barbados):

Analogue: 13°11'55.0"N 59°33'33.0"W
Decimal: 13.198611, -59.559167
Yarmouth:

Analogue: 52°36'00.0"N 1°43'00.0"E
Decimal: 52.600000, 1.716667
Next Steps:
Compile a full list of places from the provided data.
Research and verify the geolocations using historical maps, databases, and modern tools.
Convert the coordinates into both analogue and decimal formats.
Create and present the complete table.
Would you like to proceed with the detailed geolocation research for all the place names, or should I create a sample table with a subset of places first?

import pandas as pd

# Sample data for a few places with geolocation information
data = {
    "Place": ["London", "Bristol", "Barbadoes", "Yarmouth"],
    "Geolocation (Analogue Format)": ["51°30'26.6\"N 0°07'39.2\"W", "51°27'15.0\"N 2°35'29.0\"W", "13°11'55.0\"N 59°33'33.0\"W", "52°36'00.0\"N 1°43'00.0\"E"],
    "Geolocation (Decimal Format)": ["51.507389, -0.127567", "51.454167, -2.591389", "13.198611, -59.559167", "52.600000, 1.716667"]
}

# Create a DataFrame
sample_table = pd.DataFrame(data)

import ace_tools as tools; tools.display_dataframe_to_user(name="Sample Geolocation Table", dataframe=sample_table)

sample_table

Here is a sample table with place names and their geolocation information in both analogue and decimal formats:

Place	Geolocation (Analogue Format)	Geolocation (Decimal Format)
London	51°30'26.6"N 0°07'39.2"W	51.507389, -0.127567
Bristol	51°27'15.0"N 2°35'29.0"W	51.454167, -2.591389
Barbadoes	13°11'55.0"N 59°33'33.0"W	13.198611, -59.559167
Yarmouth	52°36'00.0"N 1°43'00.0"E	52.600000, 1.716667
This table provides a template for how the full geolocation data can be organized. To complete this for all places, further research and verification of historical and modern geolocations will be needed.

If you would like to proceed with the full dataset or have any specific places you'd like me to prioritize, please let me know. ​

#Please proceed with full dataset using the cleaned version where duplicates have been removed
